{
	"root": true,
	"parser": "@typescript-eslint/parser",
	"parserOptions": {
		"sourceType": "module",
		"tsconfigRootDir": "./",
		"project": "./tsconfig.json"
	},
	"plugins": ["@typescript-eslint", "prettier"],
	"extends": [
		"eslint:recommended",
		"plugin:@typescript-eslint/recommended",
		"plugin:@typescript-eslint/recommended-requiring-type-checking",
		"plugin:prettier/recommended"
	],
	"rules": {
		"prettier/prettier": "error",

		// ESLint rules.
		// See: https://eslint.org/docs/rules
		"default-case-last": "error",
		"no-await-in-loop": "error",
		"no-constructor-return": "error",
		"no-promise-executor-return": "error",
		"no-unreachable-loop": "error",
		"no-unsafe-optional-chaining": "error",
		"no-void": "error",
		"prefer-const": "error",
		"require-atomic-updates": "error",
		"require-unicode-regexp": "error",
		"strict": "error",
		"yoda": "error",

		// TypeScript rules for ESLint.
		// See: https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/eslint-plugin#supported-rules
		"@typescript-eslint/array-type": "error",
		"@typescript-eslint/consistent-type-assertions": "error",
		"@typescript-eslint/consistent-type-definitions": "error",
		"@typescript-eslint/consistent-type-imports": "error",
		"@typescript-eslint/explicit-member-accessibility": "error",
		"@typescript-eslint/explicit-module-boundary-types": "error",
		"@typescript-eslint/member-delimiter-style": "error",
		"@typescript-eslint/member-ordering": [
			"error",
			{
				"default": [
					"signature",
					"public-field",
					"public-constructor",
					"public-method",
					"protected-field",
					"protected-constructor",
					"protected-method",
					"private-field",
					"private-constructor",
					"private-method"
				]
			}
		],
		"@typescript-eslint/naming-convention": [
			"error",
			{
				"selector": "default",
				"format": ["camelCase"],
				"leadingUnderscore": "allow"
			},
			{
				"selector": "enumMember",
				"format": ["PascalCase"]
			},
			{
				"selector": "typeLike",
				"format": ["PascalCase"],
				"leadingUnderscore": "allow"
			}
		],
		"@typescript-eslint/no-explicit-any": "error",
		"@typescript-eslint/no-extraneous-class": "error",
		"@typescript-eslint/no-invalid-void-type": "error",
		"@typescript-eslint/no-non-null-assertion": "error",
		"@typescript-eslint/no-parameter-properties": "error",
		"@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
		"@typescript-eslint/no-unnecessary-condition": "error",
		"@typescript-eslint/no-unnecessary-qualifier": "error",
		"@typescript-eslint/no-unnecessary-type-arguments": "error",
		"@typescript-eslint/no-unnecessary-type-assertion": "error",
		"@typescript-eslint/no-var-requires": "error",
		"@typescript-eslint/prefer-for-of": "error",
		"@typescript-eslint/prefer-function-type": "error",
		"@typescript-eslint/prefer-nullish-coalescing": "error",
		"@typescript-eslint/prefer-optional-chain": "error",
		"@typescript-eslint/promise-function-async": "error",
		"@typescript-eslint/strict-boolean-expressions": "error",
		"@typescript-eslint/switch-exhaustiveness-check": "error",

		// TypeScript extension rules for ESLint.
		// See: https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/eslint-plugin#extension-rules
		"default-param-last": "off",
		"@typescript-eslint/default-param-last": "error",
		"dot-notation": "off",
		"@typescript-eslint/dot-notation": ["error"],
		"init-declarations": "off",
		"@typescript-eslint/init-declarations": "error",
		"no-dupe-class-members": "off",
		"@typescript-eslint/no-dupe-class-members": "error",
		"no-duplicate-imports": "off",
		"@typescript-eslint/no-duplicate-imports": "error",
		"no-invalid-this": "off",
		"@typescript-eslint/no-invalid-this": "error",
		"no-loss-of-precision": "off",
		"@typescript-eslint/no-loss-of-precision": "error",
		"no-redeclare": "off",
		"@typescript-eslint/no-redeclare": "error",
		"no-shadow": "off",
		"@typescript-eslint/no-shadow": "error",
		"no-unused-expressions": "off",
		"@typescript-eslint/no-unused-expressions": "error",
		"require-await": "off",
		"@typescript-eslint/require-await": "error",
		"no-return-await": "off",
		"@typescript-eslint/return-await": "error",
		"no-throw-literal": "off",
		"@typescript-eslint/no-throw-literal": "error",
		"no-unused-vars": "off",
		"@typescript-eslint/no-unused-vars": ["error", { "varsIgnorePattern": "^_", "argsIgnorePattern": "^_" }],
		"no-useless-constructor": "off",
		"@typescript-eslint/no-useless-constructor": "error"
	}
}
